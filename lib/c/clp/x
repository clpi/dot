#!/bin/bash
set -e;
set -u;
set -o pipefail;

r='\033[0;31m'; lr='\033[1;31m'; g='\033[0;32m'; lg='\033[1;32m'
p='\033[0;35m'; lp='\033[1;35m'; c='\033[0;36m'; lc='\033[1;36m'
y='\033[0;33m'; ly='\033[1;33m'; b='\033[0;34m'; lb='\033[1;34m'; n='\033[0m'

module=repl
compiler=gcc
workdir="$HOME/dvsa/doti/lib/c/clp/"
srcdir="src/"
builddir="target/"
out="$module"

module_rel_path="$srcdir$module.c"
module_abs_path="$workdir$srcdir$module.c"

out_rel_path="$builddir$out"
out_abs_path="$workdir$builddir$out"

builddur=
rundur=

buildcmd=$($compiler -std=c99 -Wall $srcdir$module.c -o $builddir$out)
runcmd=$($out_rel_path)

function set_paths_from_module() {
    out=$module
    module_rel_path="$srcdir$module.c"
    module_abs_path="$workdir$srcdir$module.c"
    out_rel_path="$builddir$out"
    out_abs_path="$workdir$builddir$out"

    buildcmd=$($compiler $module_rel_path -std=c99 -Wall -o $out_rel_path)
    runcmd=$out_rel_path)
}
function parse_args() {
    if [ "$#" -gt "1" ]; then
        echo $1 $2
        for $arg in $@
        do
            case $arg in
                -m|--module)   module=$2   ;;
                -c|--compiler) compiler=$2 ;;
                -o|--out)      out=$2      ;;
                -b|--builddir) builddir=$2 ;;
                -w|--workdir)  workdir=$2  ;;
                -s|--srcdir)   srcdir=$2   ;;
                *)
                    echo -e "${r}Invalid opt: ${y}-$arg${n}" 1>&2
                    exit 1
                    ;;
            esac
            shift; shift
            echo -e "${lg}Got arg $arg${n}"
        done
    elif [ "$#" -gt "0" ]; then
        echo $1
        module=$1
        set_paths_from_module
    else
        echo -e "${ly}No arguments provided${n} --"
        echo -e "${y}Running with default params${n}"
        echo -e "${b}Module ${c}repl${b} being built..${n}"
        module=repl
        set_paths_from_module
    fi
}
function print_args() {
    echo -e "${lg}VARS${n}"
    echo -e "${y}module:${n} $module"
    echo -e "${y}compiler:${n} $compiler"
    echo -e "${y}out:${n} $out"
    echo -e "${y}builddir:${n} $builddir"
    echo -e "${y}srcdir:${n} $srcdir"
    echo -e "${y}workdir:${n} $workdir"
}
function print_paths() {
    echo -e "${lg}PATHS${n}"
    echo -e "${y}module_rel_path:${n} $module_rel_path"
    echo -e "${y}module_abs_path:${n} $module_abs_path"
    echo -e "${y}out_rel_path:${n} $out_rel_path"
    echo -e "${y}out_abs_path:${n} $out_abs_path"
    echo -e "${y}build cmd:${n} $buildcmd"
    echo -e "${y}workdir:${n} $workdir"
}
function print_dur() {
    echo -e "${lg}DURATIONS${n}"
    echo -e "${y}build:${n} ${builddur}"
    echo -e "${y}run:${n} ${rundur}"
    echo -e $builddur
    echo -e $rundur
}
function build() {
    start=$(date +%s.%N)
    buildcmd
    echo -e "$(date +%s.%N) - $start" | bc
    # echo $builddur

    # echo -e "${ly}build took ${b}$builddur secs.${n}"
}
function run() {
    start=$(date +%s.%N)
    out_rel_path
    echo -e "$(date +%s.%N) - $start" | bc
    # echo $rundur
    # echo -e "${ly}run took ${b}$rundur secs.${n}"
    # return dur
}

# echo -e "${lg}dito helper script${n}"
function main() {
    # echo -e "1"
    # parse_args $@
    # echo -e "2"
    # print_args
    # echo -e "3"
    # print_paths
    # build
    # run
    # print_dur
    if [ "$#" -eq "0" ]; then
        echo -e "${y}No subcommands or opts given. Proceeding with defaults.${n}"
    else
        subc=$1;
        shift
        subcmd $SUBC


        parse_args "${@}"

    fi
    return 0

}
main
